@page "/people/edit"
@using Microsoft.EntityFrameworkCore
@using DOTNETWorkspace.Models
@inject IDbContextFactory<DOTNETWorkspace.Data.PeopleContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<style>
    .table { width: 100%; border-collapse: collapse; }
    .table th, .table td { border: 1px solid #ddd; padding: 8px; }
    .table th { background-color: #f2f2f2; text-align: left; }
    a { text-decoration: none; color: inherit; }
</style>

<div style="display: flex; align-items: center; gap: 0.5em;">
    <h1 style="margin: 0;">‚úé</h1>
    <h2 style="margin: 0;">üë§</h2>
</div>

<hr />
@if (Person is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Person" OnValidSubmit="UpdatePerson" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Person.Id" value="@Person.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Person.FirstName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Person.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Person.LastName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Person.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Person.Email" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Person.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">PhoneNumber:</label>
                    <InputText id="phonenumber" @bind-Value="Person.PhoneNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Person.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-outline-light">üíæ</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/people">‚Æê</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Person? Person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Person ??= await context.Person.FirstOrDefaultAsync(m => m.Id == Id);

        if (Person is null) NavigationManager.NavigateTo("notfound");
    }

    private async Task UpdatePerson()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Person!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PersonExists(Person!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/people");
    }

    private bool PersonExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Person.Any(e => e.Id == id);
    }
}

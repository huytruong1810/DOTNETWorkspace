@page "/Chess"
@using DOTNETWorkspace.Components.Models
@rendermode InteractiveServer

<PageTitle>Chess</PageTitle>

<style>
ul { list-style: none; }
li { display: inline-block; margin-right: 10px; }
.chess-board { display: inline-block; }
.flex-row { display: flex; align-items: center; justify-content: center; }
.board-cell {
    width: 3em;
    height: 3em;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}
.light-square { background-color: #f0d9b5; opacity: 0.9; } 
.light-square:hover { opacity: 1; }
.dark-square { background-color: #b58863; opacity: 0.9; } 
.dark-square:hover { opacity: 1; }
.valid-move { border: .25em green inset; opacity: 0.8; } 
.valid-move:hover { opacity: 0.9; }
.valid-capture { border: .25em red inset; opacity: 0.8; } 
.valid-capture:hover { opacity: 0.9; }
.piece { font-size: 2em; }
</style>

<div class="container text-center">
    <div class="row">
        <button class="btn btn-lg btn-block btn-light" @onclick="ResetGame">Reset Game</button>
        @if (_gameOver)
        {
            _board.RemoveKings();
            if (_isWhiteTurn)
            {
                _blackPoints++;
                <p>● +1</p>
            }
            else
            {
                _whitePoints++;
                <p>□ +1</p>
            }
            <p class="text-body-secondary">click ^ for a fresh board, you can keep playing this board but it won't affect points</p>

            _gameOver = false;
        }
        else
        {
            <ul>
            @foreach (var move in _algebraicHistory.Skip(Math.Max(0, _algebraicHistory.Count - 5)))
            {
                <li class="text-body-secondary">@move</li>
            }
            <li style="font-size: 2em;">@(_isWhiteTurn ? "□" : "●")</li>
            </ul>
        }
    </div>
    
    <div class="row">
        <div class="col-2">
            <h3 class="display-6">□ @_whitePoints</h3>
            <h3 class="display-6">● @_blackPoints</h3>
        </div>

        <div class="col-8 chess-board">
            @for (var row = 0; row < Board.Rows; row++)
            {
                <div class="flex-row">
                    @for (var col = 0; col < Board.Cols; col++)
                    {
                        var squareColor = (row + col) % 2 == 0 ? "light-square" : "dark-square";
                        var highlightClass =
                            _moveToPositions is not null && _capturePositions is not null
                                ? _moveToPositions.Contains((row, col))
                                    ? "valid-move"
                                    : _capturePositions.Contains((row, col))
                                        ? "valid-capture"
                                        : ""
                                : "";
                        var row1 = row;
                        var col1 = col;
                        <div class="board-cell @squareColor @highlightClass" @onclick="() => OnSquareClick(row1, col1)">
                            @if (_board.IsOccupied(row, col))
                            {
                                <span class="piece">@_board.Symbol(row, col)</span>
                            }
                        </div>
                    }
                </div>
            }
        </div>

        <div class="col-2 d-flex flex-column align-items-center">
            @foreach (var piece in _board.CapturedPieces)
            {
                <span class="piece mb-2">@piece.GetSymbol()</span>
            }
        </div>
    </div>
</div>

@code {
    private static Board _board = new();
    private static int _prevRow;
    private static int _prevCol;
    private static int _whitePoints;
    private static int _blackPoints;
    private static List<(int, int)> _moveToPositions = [];
    private static List<(int, int)> _capturePositions = [];
    private static List<string> _algebraicHistory = [];
    private static bool _isWhiteTurn = true;
    private static bool _moveMode = false;
    private static bool _gameOver = false;

    /// <summary>
    /// Handles a chess-tile-clicked event. The user could be either considering which moves to take for a piece
    /// or they want to select a particular (valid) move to be done on the game board
    /// </summary>
    /// <param name="row">x-offset of the clicked tile</param>
    /// <param name="col">y-offset of the clicked tile</param>
    private void OnSquareClick(int row, int col)
    {
        if (!_moveMode) // User wants to check the movability of the piece
        {
            if (!_board.IsOccupied(row, col)) return; // Only piece can move
            if (_board.IsWhite(row, col) != _isWhiteTurn) return; // Only the player's pieces can move
            (_moveToPositions, _capturePositions) = _board.ValidNextPositions(row, col);
            if (_moveToPositions.Count == 0 && _capturePositions.Count == 0) return; // No valid move to make
            (_prevRow, _prevCol) = (row, col);
            _moveMode = true;
        }
        else // User decides to move the piece, enter here guaranteed populated list(s) of moves
        {
            var turnSymbol = _isWhiteTurn ? "□" : "●";
            if (_moveToPositions.Contains((row, col)))
            {
                _algebraicHistory.Add(turnSymbol + _board.MoveToLongAlgebraic(_prevRow, _prevCol, row, col, false));
                _board.PlacePiece(_board.RemovePiece(_prevRow, _prevCol), row, col);
                if (_board.GetIfIsPawn(row, col) is { } pawn1) pawn1.IsFirstMove = false;
                _isWhiteTurn = !_isWhiteTurn;
            }
            else if (_capturePositions.Contains((row, col)))
            {
                // Only reach here if an enemy piece is present, i.e., clicked square, by designed, has it
                _algebraicHistory.Add(turnSymbol + _board.MoveToLongAlgebraic(_prevRow, _prevCol, row, col, true));
                var captured = _board.RemovePiece(row, col)!;
                _gameOver = captured is King;
                _board.CapturedPieces.Add(captured);
                _board.PlacePiece(_board.RemovePiece(_prevRow, _prevCol), row, col);
                if (_board.GetIfIsPawn(row, col) is { } pawn1) pawn1.IsFirstMove = false;
                _isWhiteTurn = !_isWhiteTurn;
            }
            // If all conditions above are not met, the user may have clicked away to try moving another piece
            _moveMode = false;
            // Clear the move and capture positions to stop rendering those
            _moveToPositions.Clear();
            _capturePositions.Clear();
        }
    }

    /// <summary>
    /// Make a new chess board and let white goes first
    /// </summary>
    private static void ResetGame()
    {
        _board = new Board();
        _isWhiteTurn = true;
        _moveMode = false;
        _gameOver = false;
        _moveToPositions.Clear();
        _capturePositions.Clear();
        _algebraicHistory.Clear();
    }
}